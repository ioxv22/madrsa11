const db = require('../config/database');

const createPathsAndScenarios = async () => {
  try {
    console.log('๐ฏ ุฅูุดุงุก ุฌุฏุงูู ุงููุณุงุฑุงุช ูุงูุณููุงุฑูููุงุช...');

    // ุฅูุดุงุก ุฌุฏูู ุงููุณุงุฑุงุช
    const createPathsTable = `
      CREATE TABLE IF NOT EXISTS paths (
        id INT AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(50) NOT NULL,
        name_ar VARCHAR(100) NOT NULL,
        description TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
    `;

    // ุฅูุดุงุก ุฌุฏูู ุงูุณููุงุฑูููุงุช
    const createScenariosTable = `
      CREATE TABLE IF NOT EXISTS scenarios (
        id INT AUTO_INCREMENT PRIMARY KEY,
        path_id INT NOT NULL,
        name VARCHAR(100) NOT NULL,
        name_ar VARCHAR(200) NOT NULL,
        description TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (path_id) REFERENCES paths(id) ON DELETE CASCADE
      ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
    `;

    // ุฅูุดุงุก ุฌุฏูู ุฑุจุท ุงูุณููุงุฑูููุงุช ุจุงูููุงุฏ
    const createScenarioSubjectsTable = `
      CREATE TABLE IF NOT EXISTS scenario_subjects (
        id INT AUTO_INCREMENT PRIMARY KEY,
        scenario_id INT NOT NULL,
        subject_id INT NOT NULL,
        is_core BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (scenario_id) REFERENCES scenarios(id) ON DELETE CASCADE,
        FOREIGN KEY (subject_id) REFERENCES subjects(id) ON DELETE CASCADE,
        UNIQUE KEY unique_scenario_subject (scenario_id, subject_id)
      ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
    `;

    // ุฅุถุงูุฉ ุนููุฏ ุงููุณุงุฑ ูููุณุชุฎุฏููู
    const addPathToUsers = `
      ALTER TABLE users 
      ADD COLUMN path_id INT NULL,
      ADD COLUMN scenario_id INT NULL,
      ADD FOREIGN KEY (path_id) REFERENCES paths(id) ON DELETE SET NULL,
      ADD FOREIGN KEY (scenario_id) REFERENCES scenarios(id) ON DELETE SET NULL
    `;

    // ุชูููุฐ ุงูุงุณุชุนูุงูุงุช
    const queries = [
      { name: 'ุฅูุดุงุก ุฌุฏูู ุงููุณุงุฑุงุช', query: createPathsTable },
      { name: 'ุฅูุดุงุก ุฌุฏูู ุงูุณููุงุฑูููุงุช', query: createScenariosTable },
      { name: 'ุฅูุดุงุก ุฌุฏูู ุฑุจุท ุงูุณููุงุฑูููุงุช ุจุงูููุงุฏ', query: createScenarioSubjectsTable }
    ];

    for (const { name, query } of queries) {
      await new Promise((resolve, reject) => {
        db.query(query, (err, result) => {
          if (err) {
            console.error(`โ ุฎุทุฃ ูู ${name}:`, err);
            reject(err);
          } else {
            console.log(`โ ${name}`);
            resolve(result);
          }
        });
      });
    }

    // ุฅุถุงูุฉ ุนููุฏ ุงููุณุงุฑ ูููุณุชุฎุฏููู (ูุฏ ูููู ููุฌูุฏ)
    await new Promise((resolve) => {
      db.query(addPathToUsers, (err, result) => {
        if (err && !err.message.includes('Duplicate column name')) {
          console.error('โ ุฎุทุฃ ูู ุฅุถุงูุฉ ุนููุฏ ุงููุณุงุฑ:', err);
        } else {
          console.log('โ ุชู ุฅุถุงูุฉ ุนููุฏ ุงููุณุงุฑ ูููุณุชุฎุฏููู');
        }
        resolve();
      });
    });

    // ุฅุฏุฑุงุฌ ุงููุณุงุฑุงุช
    const insertPaths = `
      INSERT IGNORE INTO paths (name, name_ar, description) VALUES
      ('general', 'ุงููุณุงุฑ ุงูุนุงู', 'ุงููุณุงุฑ ุงูุนุงู ููุตู ุงูุญุงุฏู ุนุดุฑ'),
      ('advanced', 'ุงููุณุงุฑ ุงููุชูุฏู', 'ุงููุณุงุฑ ุงููุชูุฏู ููุตู ุงูุญุงุฏู ุนุดุฑ')
    `;

    await new Promise((resolve, reject) => {
      db.query(insertPaths, (err, result) => {
        if (err) {
          console.error('โ ุฎุทุฃ ูู ุฅุฏุฑุงุฌ ุงููุณุงุฑุงุช:', err);
          reject(err);
        } else {
          console.log('โ ุชู ุฅุฏุฑุงุฌ ุงููุณุงุฑุงุช');
          resolve(result);
        }
      });
    });

    // ุฅุฏุฑุงุฌ ุงูุณููุงุฑูููุงุช
    const insertScenarios = `
      INSERT IGNORE INTO scenarios (path_id, name, name_ar, description) VALUES
      (1, 'general_scenario_1', 'ุงูุณููุงุฑูู ุงูุฃูู - ุงูุนุงู', 'ููููุงุก + ุฃุญูุงุก + ุงูููุงุฏ ุงูุฃุณุงุณูุฉ'),
      (1, 'general_scenario_2', 'ุงูุณููุงุฑูู ุงูุซุงูู - ุงูุนุงู', 'ููุฒูุงุก + ููููุงุก + ุงูููุงุฏ ุงูุฃุณุงุณูุฉ'),
      (2, 'advanced_scenario_1', 'ุงูุณููุงุฑูู ุงูุฃูู - ุงููุชูุฏู', 'ููุฒูุงุก + ููููุงุก + ุงูููุงุฏ ุงูุฃุณุงุณูุฉ'),
      (2, 'advanced_scenario_2', 'ุงูุณููุงุฑูู ุงูุซุงูู - ุงููุชูุฏู', 'ููููุงุก + ููุฒูุงุก + ุฃุญูุงุก + ุงูููุงุฏ ุงูุฃุณุงุณูุฉ')
    `;

    await new Promise((resolve, reject) => {
      db.query(insertScenarios, (err, result) => {
        if (err) {
          console.error('โ ุฎุทุฃ ูู ุฅุฏุฑุงุฌ ุงูุณููุงุฑูููุงุช:', err);
          reject(err);
        } else {
          console.log('โ ุชู ุฅุฏุฑุงุฌ ุงูุณููุงุฑูููุงุช');
          resolve(result);
        }
      });
    });

    // ุฑุจุท ุงูููุงุฏ ุจุงูุณููุงุฑูููุงุช
    const linkSubjectsToScenarios = async () => {
      // ุงูุญุตูู ุนูู IDs ุงูููุงุฏ
      const getSubjectIds = `
        SELECT id, name FROM subjects 
        WHERE name IN ('mathematics', 'physics', 'chemistry', 'english', 'arabic', 'biology')
      `;

      const subjects = await new Promise((resolve, reject) => {
        db.query(getSubjectIds, (err, results) => {
          if (err) {
            reject(err);
          } else {
            resolve(results);
          }
        });
      });

      const subjectMap = {};
      subjects.forEach(subject => {
        subjectMap[subject.name] = subject.id;
      });

      // ุงูููุงุฏ ุงูุฃุณุงุณูุฉ ูุฌููุน ุงูุณููุงุฑูููุงุช
      const coreSubjects = ['mathematics', 'english', 'arabic'];

      // ุชุนุฑูู ุงูุณููุงุฑูููุงุช
      const scenarioSubjects = {
        1: [...coreSubjects, 'chemistry', 'biology'], // ุนุงู - ุณููุงุฑูู 1
        2: [...coreSubjects, 'physics', 'chemistry'], // ุนุงู - ุณููุงุฑูู 2
        3: [...coreSubjects, 'physics', 'chemistry'], // ูุชูุฏู - ุณููุงุฑูู 1
        4: [...coreSubjects, 'chemistry', 'physics', 'biology'] // ูุชูุฏู - ุณููุงุฑูู 2
      };

      // ุฅุฏุฑุงุฌ ุฑุจุท ุงูููุงุฏ ุจุงูุณููุงุฑูููุงุช
      for (const [scenarioId, subjectNames] of Object.entries(scenarioSubjects)) {
        for (const subjectName of subjectNames) {
          const subjectId = subjectMap[subjectName];
          const isCore = coreSubjects.includes(subjectName);

          const insertLink = `
            INSERT IGNORE INTO scenario_subjects (scenario_id, subject_id, is_core) 
            VALUES (?, ?, ?)
          `;

          await new Promise((resolve, reject) => {
            db.query(insertLink, [scenarioId, subjectId, isCore], (err, result) => {
              if (err) {
                console.error(`โ ุฎุทุฃ ูู ุฑุจุท ุงููุงุฏุฉ ${subjectName} ุจุงูุณููุงุฑูู ${scenarioId}:`, err);
                reject(err);
              } else {
                resolve(result);
              }
            });
          });
        }
      }

      console.log('โ ุชู ุฑุจุท ุฌููุน ุงูููุงุฏ ุจุงูุณููุงุฑูููุงุช');
    };

    await linkSubjectsToScenarios();

    console.log('๐ ุชู ุฅูุดุงุก ูุธุงู ุงููุณุงุฑุงุช ูุงูุณููุงุฑูููุงุช ุจูุฌุงุญ!');
    console.log('');
    console.log('๐ ููุฎุต ุงูุณููุงุฑูููุงุช:');
    console.log('๐ ุงููุณุงุฑ ุงูุนุงู:');
    console.log('   ๐ ุงูุณููุงุฑูู 1: ุฑูุงุถูุงุช + ุฅูุฌููุฒู + ุนุฑุจู + ููููุงุก + ุฃุญูุงุก');
    console.log('   ๐ ุงูุณููุงุฑูู 2: ุฑูุงุถูุงุช + ุฅูุฌููุฒู + ุนุฑุจู + ููุฒูุงุก + ููููุงุก');
    console.log('๐ ุงููุณุงุฑ ุงููุชูุฏู:');
    console.log('   ๐ ุงูุณููุงุฑูู 1: ุฑูุงุถูุงุช + ุฅูุฌููุฒู + ุนุฑุจู + ููุฒูุงุก + ููููุงุก');
    console.log('   ๐ ุงูุณููุงุฑูู 2: ุฑูุงุถูุงุช + ุฅูุฌููุฒู + ุนุฑุจู + ููููุงุก + ููุฒูุงุก + ุฃุญูุงุก');

    process.exit(0);

  } catch (error) {
    console.error('โ ุฎุทุฃ ุนุงู:', error);
    process.exit(1);
  }
};

// ุชุดุบูู ุงูุณูุฑูุจุช
createPathsAndScenarios();